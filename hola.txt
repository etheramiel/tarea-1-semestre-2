void instrucciones(std::string nombre_archivo, std::string *&instruccion, int &cant_programas, int &largo_max) {


    int cant_instrucciones = 0;
    std::ifstream archivo(nombre_archivo);

    if (archivo.is_open()) {

        std::string linea;
        int largo_maximo, cantidad_programas;
        archivo>>largo_maximo>>cantidad_programas;
        largo_max = largo_maximo;
        cant_programas = cantidad_programas;

        archivo.clear(); // Restablecer el puntero del archivo al inicio
        archivo.seekg(0, std::ios::beg); // Mover el puntºero del archivo al inicio


        while (std::getline(archivo, linea)) {
            cant_instrucciones++;
        }

        archivo.clear(); // Restablecer el puntero del archivo al inicio
        archivo.seekg(0, std::ios::beg); // Mover el puntºero del archivo al inicio
        std::string *aux;
        aux = new std::string[cant_instrucciones];

        instruccion = new std::string[cant_instrucciones];  //BORRAR AL FINALIZAR EL PROGRAMA
        int i = 0;
        while(std::getline(archivo, linea)){

            aux[i] = linea;
            //std::cout<<instruccion[i]<<std::endl;

            i++;
        }
        int j = 0;
        for(int i = 2; i<cant_instrucciones; i++){
            instruccion[j++] = aux[i];
        }
        delete[] aux;

        archivo.clear(); // Restablecer el puntero del archivo al inicio
        archivo.seekg(0, std::ios::beg); // Mover el puntero del archivo al inicio
        archivo.close();
    } else {
        std::cerr << "Error: No se pudo abrir el archivo " << nombre_archivo << std::endl;
    }
}

class Interprete {
    private :
        int cant_programas ;
        int largo_salida ;
        int cargado ;
        Programa * programas ;
        int * salida ;


        int numero_programa;
        std::string *instruccion;


    public :
        Interprete ( int cant_programas , int largo_salidas ) ;     //LISTO
        void cargar_programa ( int n ) ;                         //LISTO            
        void ejecutar_programa () ;                 //LISTO 
        void mostrar_programa_cargado () ;                                  //LISTO
        void terminar_ejecucion () ;

        ~Interprete() ;                                             //LISTO 
        void extraer_datos();                                   //LISTO


};

//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Interprete::~Interprete() {
    delete[] programas;
    delete[] salida;
}

Interprete::Interprete(int cant_programas, int largo_salida) {
    this->cant_programas = cant_programas;
    this->largo_salida = largo_salida;
    //this->cargado = 0;
    this->programas = new Programa[cant_programas];
    this->salida = new int[largo_salida];
    
};

void Interprete::extraer_datos(){
    instrucciones("Programas.txt", instruccion, cant_programas, largo_salida);
};


void Interprete::cargar_programa(int n) {
    programas[n] = Programa(instruccion[n].length());
    numero_programa = n;
};

void Interprete::ejecutar_programa() {
    programas[numero_programa].crear_arreglo_operaciones(instruccion[numero_programa], largo_salida);

};

void Interprete::mostrar_programa_cargado(){
   std::cout<<instruccion[numero_programa]<<std::endl;
}


class Programa {

private :
int largo_operaciones ;
char * puntero_operaciones ;
int * puntero_salida ;
char * operaciones ;


std::string *instruccion;
char *palabras ;
int largo_max;

public :
void ejecutar_operador () ;
void mover ( char dir ) ;
void asignar ( int valor , int * salida ) ;
char obtener () ;
void terminar_programa () ;
Programa();
Programa ( int largo_operaciones ) ;
~Programa();
void ejecutar () ;

void extraer_datos();
void crear_arreglo_operaciones(std::string instrucciones, int largo_salida);


};


Programa::~Programa() {
    delete[] operaciones;
    delete[] puntero_salida;
}

Programa::Programa() {

}

Programa::Programa(int largo_operaciones){
    this->largo_operaciones = largo_operaciones;
    this->operaciones = new char[largo_operaciones];
    this->puntero_salida = new int[1];
    *puntero_salida = 0;
}

char Programa::obtener(){

    char especiales[] = {'.' , ':' , '+' , '-' , '<', '>' , '[' , ']' , '!'};  
  

    if(*puntero_salida > 71 || *puntero_salida < 0){
        *puntero_salida = abs(*puntero_salida) % 72;
    }

    if(*puntero_salida == 0){
        return ' ';
    }

    else if (*puntero_salida > 0 && *puntero_salida < 27){
        return 'a' + (*puntero_salida - 1);
    }

    else if (*puntero_salida > 26 && *puntero_salida < 53){
        return 'A' + (*puntero_salida - 27);
    }

    else if (*puntero_salida > 52 && *puntero_salida < 63){
        return '0' + (*puntero_salida - 53);
    }

    else if (*puntero_salida > 62 && *puntero_salida < 72){
        return especiales[*puntero_salida - 63];
    }
    return ' ';
}

void Programa::ejecutar_operador(){

    while (*puntero_operaciones != '!'){

        if(*puntero_operaciones == '>'){
            mover('>'); 
        }

        else if(*puntero_operaciones == '<'){
            mover('<');
        }

        else if(*puntero_operaciones == '+'){
            ++(*puntero_salida);
        }

        else if(*puntero_operaciones == '-'){
            --(*puntero_salida);
        }

        else if(*puntero_operaciones == '.'){
            std::cout<<*puntero_salida;
        }

        else if(*puntero_operaciones == ':'){
            std::cout<<*puntero_salida;
        }

        else if(*puntero_operaciones == '['){
            if(*puntero_salida == 0){
                int contador = 1;
                while(contador != 0){
                    ++puntero_operaciones;
                    if(*puntero_operaciones == '['){
                        ++contador;
                    }
                    else if(*puntero_operaciones == ']'){
                        --contador;
                    }
                }
            }
        }
        else if(*puntero_operaciones == ']'){
            if(*puntero_salida != 0){
                int contador = 1;
                while(contador != 0){
                    --puntero_operaciones;
                    if(*puntero_operaciones == '['){
                        --contador;
                    }
                    else if(*puntero_operaciones == ']'){
                        ++contador;
                    }
                }
            }     
        }
            
    }
};



void Programa::ejecutar(){
    
    puntero_salida = new int[largo_max];
    puntero_operaciones = operaciones;
    
    for(int i = 0; i<largo_operaciones ; i++){
        ejecutar_operador();
        ++puntero_operaciones;
    }


}


void Programa::mover(char dir){
    
    if (dir=='<'){
        --puntero_salida;
    }
    else if (dir=='>'){
        ++puntero_salida;
        
    }
}


void Programa::asignar ( int valor , int * salida ) {

    *salida = valor;
}


//LISTO
void Programa::crear_arreglo_operaciones(std::string instrucciones, int largo_salida){
    for(int i = 0; i < (int)instrucciones.length(); i++){
        operaciones[i] = instrucciones[i];
    }

    largo_max = largo_salida;

}

void procesar_instruccion(const std::string& comando, Interprete& interpreter) {
    if (comando == "c") {
        int n;
        std::cin >> n;  // Leer el índice del programa
        std::cout << "Cargar programa número: " << n << std::endl;
        interpreter.cargar_programa(n);
        
    } else if (comando == "e") {
        std::cout << "Ejecutar programa cargado" << std::endl;
        interpreter.ejecutar_programa();
    } else if (comando == "m") {
        std::cout << "Mostrar programa cargado" << std::endl;
        interpreter.mostrar_programa_cargado();
    } else {
        std::cout << "Terminar ejecución" << std::endl;
        //interpreter.terminar_ejecucion();
    }
}

int main() {
    std::string comando;
    int cant_programas = 0, largo_max = 0;
    std::string *instruccion = nullptr;
    instrucciones("Programas.txt", instruccion, cant_programas, largo_max);


    Interprete interpreter(cant_programas, largo_max);


    while (true) {
        std::cout << "Ingresa una instrucción: ";
        std::cin >> comando;
        

        if (comando == "s") {
            procesar_instruccion(comando, interpreter);
            break;
        }

        procesar_instruccion(comando, interpreter);
    }

    return 0;
}